-- 1. Користувачі з роллю 'customer' і поштою, що містить '@gmail'
SELECT * FROM users
WHERE role = 'customer' AND email LIKE '%@gmail%';

-- 2. Товари, що дорожчі за 500 або належать до категорії з id 1
SELECT * FROM products
WHERE price > 500 OR category_id = 1;

-- 3. Замовлення, які не мають статусу "Оплачено"
SELECT * FROM orders
WHERE NOT status = 'Оплачено';





 II. Агрегатні функції (COUNT, SUM, AVG, MIN, MAX)
sql
Копировать
Редактировать
-- 4. Кількість користувачів
SELECT COUNT(*) FROM users;

-- 5. Середня ціна товарів
SELECT AVG(price) FROM products;

-- 6. Найдорожчий товар
SELECT MAX(price) FROM products;

-- 7. Мінімальна сума платежу
SELECT MIN(amount) FROM payments;

-- 8. Загальна сума всіх платежів
SELECT SUM(amount) FROM payments;



 III. JOIN-и (INNER, LEFT, RIGHT, FULL, CROSS, SELF)
sql
Копировать
Редактировать
-- 9. INNER JOIN: Товари з назвами категорій
SELECT p.product_name, c.category_name
FROM products p
INNER JOIN categories c ON p.category_id = c.category_id;

-- 10. LEFT JOIN: Всі товари з інформацією про категорію (навіть без категорії)
SELECT p.product_name, c.category_name
FROM products p
LEFT JOIN categories c ON p.category_id = c.category_id;

-- 11. RIGHT JOIN: Усі категорії з наявними товарами
SELECT p.product_name, c.category_name
FROM products p
RIGHT JOIN categories c ON p.category_id = c.category_id;

-- 12. FULL JOIN: Всі товари й категорії незалежно від зв'язку
SELECT p.product_name, c.category_name
FROM products p
FULL JOIN categories c ON p.category_id = c.category_id;

-- 13. CROSS JOIN: Всі можливі комбінації товарів і категорій
SELECT p.product_name, c.category_name
FROM products p
CROSS JOIN categories c;

-- 14. SELF JOIN: Порівняння товарів однієї категорії
SELECT p1.product_name AS product1, p2.product_name AS product2
FROM products p1
JOIN products p2 ON p1.category_id = p2.category_id AND p1.product_id < p2.product_id;



IV. Підзапити (IN, NOT IN, EXISTS, NOT EXISTS)
sql
Копировать
Редактировать
-- 15. Користувачі, які мають хоча б одне замовлення
SELECT * FROM users
WHERE user_id IN (SELECT user_id FROM orders);

-- 16. Користувачі, які не мають жодного замовлення
SELECT * FROM users
WHERE user_id NOT IN (SELECT user_id FROM orders);

-- 17. Товари, які були замовлені хоча б раз
SELECT * FROM products
WHERE EXISTS (
  SELECT 1 FROM order_items WHERE order_items.product_id = products.product_id
);

-- 18. Товари, які ніколи не замовлялись
SELECT * FROM products
WHERE NOT EXISTS (
  SELECT 1 FROM order_items WHERE order_items.product_id = products.product_id
);



V. Операції над множинами (UNION, INTERSECT, EXCEPT)
sql
Копировать
Редактировать
-- 19. UNION: користувачі з email @gmail або @ukr.net
SELECT username FROM users WHERE email LIKE '%@gmail%'
UNION
SELECT username FROM users WHERE email LIKE '%@ukr.net%';

-- 20. INTERSECT: користувачі з email @gmail і роллю 'customer'
SELECT username FROM users WHERE email LIKE '%@gmail%'
INTERSECT
SELECT username FROM users WHERE role = 'customer';

-- 21. EXCEPT: всі користувачі крім модераторів
SELECT username FROM users
EXCEPT
SELECT username FROM users WHERE role = 'moderator';


 VI. CTE (Common Table Expressions)
sql
Скопировано
Редактировать
-- 22. CTE: сума замовлень по користувачах
WITH order_totals AS (
  SELECT user_id, SUM(amount) AS total_spent
  FROM payments
  JOIN orders ON payments.order_id = orders.order_id
  GROUP BY user_id
)
SELECT u.username, ot.total_spent
FROM users u
JOIN order_totals ot ON u.user_id = ot.user_id;




 VII. Віконні функції (Window Functions)
sql
Копировать
Редактировать
-- 23. Рейтинг користувачів за витраченими грошима
SELECT 
  u.username,
  SUM(p.amount) AS total_paid,
  RANK() OVER (ORDER BY SUM(p.amount) DESC) AS user_rank
FROM users u
JOIN orders o ON u.user_id = o.user_id
JOIN payments p ON o.order_id = p.order_id
GROUP BY u.username;

-- 24. Сума замовлення та середня сума по всім
SELECT 
  o.order_id,
  p.amount,
  AVG(p.amount) OVER () AS avg_payment
FROM payments p
JOIN orders o ON p.order_id = o.order_id;
